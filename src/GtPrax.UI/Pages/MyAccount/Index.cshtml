@page
@model GtPrax.UI.Pages.MyAccount.IndexModel
@{
    ViewData["Title"] = Model.GetNode().Title;
    ViewData["HasFooter"] = true;
    Model.BuildHeaderMenu();
    var changePasswordPage = Model.GetNode<ChangePasswordModel>().Page;
    var changeEmailPage = Model.GetNode<ChangeEmailModel>().Page;
    var editTwoFactorPage = Model.GetNode<EditTwoFactorModel>().Page;
}

@await Html.PartialAsync("_Header")

<section class="section">
    <div class="container">

        <div class="columns is-gapless is-mobile">
            <div class="column is-flex is-align-items-center">@Html.CreateBreadcrumb()</div>
            <div class="column is-narrow">
                <div class="dropdown is-hoverable is-right">
                    <div class="dropdown-trigger">
                        <button class="button" aria-haspopup="true" aria-controls="user-action">
                            <span class="icon is-small">
                                <i class="fas fa-ellipsis-h"></i>
                            </span>
                        </button>
                    </div>
                    <div class="dropdown-menu" id="user-action" role="menu">
                        <div class="dropdown-content">
                            <a href="@Url.PageLink(changePasswordPage)" class="dropdown-item">
                                @(Model.GetNode<ChangePasswordModel>().Title)
                            </a>
                            <a href="@Url.PageLink(changeEmailPage)" class="dropdown-item">
                                @(Model.GetNode<ChangeEmailModel>().Title)
                            </a>
                            <a href="@Url.PageLink(editTwoFactorPage)" class="dropdown-item">
                                @(Model.GetNode<EditTwoFactorModel>().Title)
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="columns">
            <div class="column is-half">

                @if (!ModelState.IsValid)
                {
                    <div class="notification is-danger">
                        <button class="delete"></button>
                        <div asp-validation-summary="All"></div>
                    </div>
                }

                @if (Model.Message is not null)
                {
                    <div class="notification is-success">
                        <button class="delete"></button>
                        @Model.Message
                    </div>
                }

                <form method="post">
                    <fieldset disabled="@Model.IsDisabled">
                        <div class="field">
                            <label class="label" asp-for="Email"></label>
                            <div class="control">
                                <input class="input" type="email" asp-for="Email" disabled="disabled" />
                            </div>
                        </div>
                        <div class="field">
                            <label class="label" asp-for="Name"></label>
                            <div class="control">
                                <input class="input" type="text" asp-for="Name" />
                            </div>
                            <span asp-validation-for="Name"></span>
                        </div>

                        <button class="button is-primary" type="submit">Speichern</button>
                    </fieldset>
                </form>
            </div>
        </div>


    </div>
</section>

@await Html.PartialAsync("_Footer")
